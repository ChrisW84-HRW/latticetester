// This file is part of LatticeTester.
//
// Copyright (C) 2012-2022  The LatticeTester authors, under the supervision
// of Pierre L'Ecuyer at Universit� de Montr�al.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef LATTICETESTER_REDUCERBBMINK_H
#define LATTICETESTER_REDUCERBBMINK_H

#include <fstream>
#include <sstream>
#include <vector>
#include <limits>
#include <cstdint>
#include <iostream>
#include <ctime>
#include <string>
#include <iomanip>
#include <set>
#include <map>
#include <cmath>
#include <cstdlib>
#include <type_traits>

#include "NTL/LLL.h"
#include "NTL/tools.h"
#include "NTL/ZZ.h"
#include "NTL/RR.h"

#include "latticetester/EnumTypes.h"
#include "latticetester/Util.h"
#include "latticetester/IntLattice.h"
#include "latticetester/BasisConstruction.h"
#include "latticetester/ReducerBB.h"
//#include "latticetester/LLL_RR_lt.h"

namespace LatticeTester {

/**
 * This file contains old material that was removed from `ReducerBB.h`.
 */

template<typename Int, typename Real>
class ReducerBB-OLD {

// using namespace LatticeTester;

public:

   /**
    * Performs pairwise reductions. This method tries to reduce each basis
    * vector with index larger than \f$d\f$ and distinct from \f$i\f$ by
    * adding to it a multiple of the \f$i\f$-th vector. Always uses the
    * Euclidean norm.
    */
   void pairwiseRedPrimal(int64_t i, int64_t d, bool taboo[] = NULL);

   /**
    * Performs pairwise reductions, trying to reduce every other vector of
    * the *dual* basis by adding multiples of the \f$i\f$-th vector. That
    * may change the \f$i\f$-th vector in the primal basis. Each such dual
    * reduction is actually performed only if that does not increase the
    * length of vector \f$i\f$ in the primal basis. Always uses the
    * Euclidean norm.
    */
   // void pairwiseRedDual(int64_t i, bool taboo[] = NULL);

   /**
    * Computes a Cholesky decomposition of the basis. Returns in `C0` the
    * elements of the upper triangular matrix of the Cholesky
    * decomposition that are above the diagonal. Returns in `DC2` the
    * squared elements of the diagonal.
    */
   bool calculCholesky(RealVec &DC2, RealMat &C0);

   /**
    * Recalculates the first \f$n\f$ entries of the \f$j^{th}\f$ column of
    * the Cholesky matrix of order 2.
    */
   void calculCholesky2LLL(int64_t n, int64_t j);

   /**
    * Recalculates the entry (\f$i\f$, \f$j\f$) of the Cholesky matrix of order 2.
    */
   void calculCholesky2Ele(int64_t i, int64_t j);

   /**
    * Permutes the \f$i^{th}\f$ and the \f$j^{th}\f$ line, and the
    * \f$i^{th}\f$ and the \f$j^{th}\f$ column of the scalar products matrix.
    */
   void permuteGramVD(int64_t i, int64_t j, int64_t n);

   /*
    * Recomputes the element in row `j` and column `j` of the matrix of scalar products.
    */
   void miseAJourGramVD(int64_t j);

   /*
    * Computes and stores in `m_gramVD` the matrix of scalar products `m_lat->V[i]*m_lat->V[j]`.
    * Equivalent to computing `m_lat->V * transpose(m_lat->V)`.  Used only by redLLLOld.
    */
   void calculGramVD();

   /**
    * Reduces the Cholesky matrix by adding a multiple of the i-th vector
    * to the j-th vector. It updates the Gram-Schmidt matrix.
    */
   void reductionFaible(int64_t i, int64_t j);

   /**
    * This is an old implementation of LLL translated from an old Modula-2 code.
    * It is considerably slower than the NTL versions when Int = ZZ.
    * We leave it here mostly to enable comparisons.
    * This function performs a LLL basis reduction with factor `delta` \cite iLEC22l.
    * The reduction is applied to the first `dim` basis vectors and coordinates
    * when `dim > 0`, and to the entire basis (all vectors) when `dim=0`.
    * Note that in the former case, the transformations are not applied to all the
    * columns, so we no longer have a consistent basis for the original lattice,
    * so we should make internal copies just in case dim > 0.
    * If we want a reduced basis for a subset of coordinates, we should first make
    * a copy to get a basis for these coordinates, before invoking this LLL.
    *
    * This function always uses the Euclidean norm.
    * The factor `delta` must be between 1/2 and 1. The closer it is to 1,
    * the more the basis is reduced, in the sense that the LLL
    * algorithm will enforce tighter conditions on the basis,
    * but this will require more work. The reduction algorithm is
    * applied until `maxcpt` successful transformations have been done,
    * or until the basis is correctly LLL reduced with factor `delta`.
    */
   void redLLLOld(double delta = 0.999999, std::int64_t maxcpt = 1000000000, int64_t dim = 0);

   /*
    * Local working variables for this class.
    * They are used inside the basis reduction and short vector methods, and
    * are declared here to avoid passing them as parameters across the methods.
    * The matrices and vectors are sized to some maximum dimensions in init(),
    * which must be large enough for all computations handled by this ReducerBB object.
    */
   int64_t m_maxDim, m_dim; // maximum dimension and current dimension.
   IntVec m_bv;   // Saves current shortest vector in primal basis
   // IntVec m_bw;   // Saves current shortest vector in dual basis (for Mink) ??
   Real m_lMin;   // The norm of the shortest vector in the primal basis
                  // according to the norm considered
   Real m_lMin2;  // Squared L2-norm of the shortest vector in the primal basis.

   Int m_bs;      // Used in pairwiseRedPrimal and pairwiseRedDual.
   Real m_ns;     // Used in pairwiseRedPrimal and pairwiseRedDual.
   // RealVec m_nv;  // Used in pairwiseRedDual.

   RealVec m_n2, m_dc2; // Vectors used in BB algorithms, in tryZShortVec and tryZMink.
   RealMat m_c0, m_c2;  // Matrices used in the Cholesky decomposition.
                        // We must avoid resizing them, because this is expensive!
   int64_t *m_IC;       // Indexes used in Cholesky

   std::vector<std::int64_t> m_zLI;   // Vector of values of z_i.
   RealVec m_zLR;     // Same values of z_i in floating point;
                      // we need them in FP when calculating bounds.
   std::vector<std::int64_t> m_zShort;  // Values of z_i for shortest vector.
   std::int64_t m_countNodes = 0;  // Number of visited nodes in the BB tree
   std::int64_t m_cpt;  // Number of successes in pre-reduction transformations
   bool m_foundZero;    // = true -> the zero vector has been handled

   RealMat m_cho2, m_gramVD;  // Matrices used by redLLLOld.

};
// End of class ReducerBB


//=========================================================================
// IMPLEMENTATION

/
//=========================================================================

template<typename Int, typename Real>
inline void ReducerBB<Int, Real>::calculGramVD() {
   // Returns in m_gramVD the matrix of scalar products m_lat->V[i] * m_lat->V[j].
   // The vector m_lat->V.vecNorm contains only the values m_lat->V[i] * m_lat->V[i].
   // Used only by redLLLOld.
   // %%%  Could easily be made static.
   const int64_t dim = m_lat->getDim();
   Int temp;
   for (int64_t i = 0; i < dim; i++) {
      IntVec &row1 = m_lat->getBasis()[i];
      // NTL::Mat_row<Int> row1(m_lat->getBasis(), i);
      // this->_vec__rep = (typename M::value_type*&) data[i]._vec__rep;
      temp = 0;
      for (int64_t h = 0; h < dim; h++)
         // NTL::MulAddTo(temp, m_lat->getBasis()[i][h], m_lat->getBasis()[i][h]);
         NTL::MulAddTo(temp, row1[h], row1[h]);
      NTL::conv(m_gramVD[i][i], temp);
      for (int64_t j = i + 1; j < dim; j++) {
         // NTL::Mat_row<Int> row2(m_lat->getBasis(), j);
         IntVec &row2 = m_lat->getBasis()[j];
         temp = 0;
         for (int64_t h = 0; h < dim; h++)
            NTL::MulAddTo(temp, row1[h], row2[h]);
         NTL::conv(m_gramVD[i][j], temp);
         m_gramVD[j][i] = m_gramVD[i][j];
      }
   }
}

//=========================================================================

template<typename Int, typename Real>
inline void ReducerBB<Int, Real>::miseAJourGramVD(int64_t j) {
   // Recalcule la j-ieme ligne et la j-ieme colonne de la matrice des
   // produits scalaires.  Used only in redLLLOld.
   // %%%  Could easily be made static by passing the rows and gramVD as parameters.
   const int64_t dim = m_lat->getDim();
   for (int64_t i = 0; i < dim; i++) {
      //NTL::Mat_row<Int> row1(m_lat->getBasis(), i);
      //NTL::Mat_row<Int> row2(m_lat->getBasis(), j);
      IntVec &row1 = m_lat->getBasis()[i];
      IntVec &row2 = m_lat->getBasis()[j];
      ProdScal<Int>(row1, row2, dim, m_gramVD[i][j]);
      m_gramVD[j][i] = m_gramVD[i][j];
   }
}

//=========================================================================

template<typename Int, typename Real>
void ReducerBB<Int, Real>::permuteGramVD(int64_t i, int64_t j, int64_t n) {
   // %%%  Could swap the rows directly.
   int64_t k;
   for (k = 0; k < n; k++) {
      std::swap(m_gramVD[i][k], m_gramVD[j][k]);
   }
   for (k = 0; k < n; k++) {
      std::swap(m_gramVD[k][i], m_gramVD[k][j]);
   }
}

//=========================================================================

template<typename Int, typename Real>
void ReducerBB<Int, Real>::calculCholesky2LLL(int64_t n, int64_t j) {
   // Recalcule les n premieres entrees de la colonne j de la matrice de
   // Cholesky d'ordre 2.   Pour redLLLOld.
   m_cho2[0][j] = m_gramVD[0][j];
   for (int64_t i = 1; i <= n; i++) {
      m_cho2[i][j] = m_gramVD[i][j];
      for (int64_t k = 0; k < i; k++) {
         m_cho2[i][j] -= (m_cho2[k][j] / m_cho2[k][k]) * m_cho2[k][i];
      }
   }
}

//=========================================================================

template<typename Int, typename Real>
inline void ReducerBB<Int, Real>::calculCholesky2Ele(int64_t i, int64_t j) {
   // Recalcule l'entree [i][j] de la matrice de Cholesky d'ordre 2.
   // Used only by redLLLOld.
   m_cho2[i][j] = m_gramVD[i][j];
   for (int64_t k = 0; k < i; k++) {
      m_cho2[i][j] -= m_cho2[k][i] * (m_cho2[k][j] / m_cho2[k][k]);
   }
}

//=========================================================================

void negativeCholesky() {
   std::cout << "\n***** Negative diagonal element in Cholesky Decomposition\n" << std::endl;
}

template<typename Int, typename Real>
bool ReducerBB<Int, Real>::calculCholesky(RealVec &DC2, RealMat &C0) {
   /*
    * Returns in C0 the elements of the upper triangular matrix of the
    * Cholesky decomposition that are above the diagonal. Returns in DC2 the
    * squared elements of the diagonal. These elements are rescaled by EchVV
    * when SISquares= true.
    */
   const int64_t dim = m_lat->getDim();
   int64_t k, j, i;
   Real m2;
   // C2[i][j] = C0[i][j] * C2[i][i] if i != j.
   // C2[i][i] = DC2[i].
   NTL::conv(m2, m_lat->getModulus());
   m2 = m2 * m2;
   int64_t d = dim;
   //if(m_lat->withDual())
   //  d = dim / 2; // If we use the Dual, we compute Cholesky
   // with the Dual

   // Compute the d first lines of C0 with the primal Basis.
   for (i = 0; i < d; i++) {
      m_lat->updateScalL2Norm(i);
      IntVec &row1 = m_lat->getBasis()[i];
      // NTL::Mat_row<Int> row1(m_lat->getBasis(), i);
      for (j = i; j < dim; j++) {
         if (j == i) NTL::conv(m_c2[i][i], m_lat->getVecNorm(i));
         else {
            IntVec &row2 = m_lat->getBasis()[j];
            // NTL::Mat_row<Int> row2(m_lat->getBasis(), j);
            ProdScal<Int>(row1, row2, dim, m_c2[i][j]);
         }
         for (k = 0; k < i; k++)
            m_c2[i][j] -= C0[k][i] * m_c2[k][j];
         if (i == j) {
            DC2[i] = m_c2[i][i];
            if (DC2[i] < 0.0) {
               negativeCholesky();
               return false;
            }
         } else C0[i][j] = m_c2[i][j] / DC2[i];
         // add for test
         /**  if(i!=j && i<j)
          std::cout<< "C0("<<i<<","<<j<<")="<<C0[i][j]<<" ";
          else if (i==j)
          std::cout<< "C0("<<i<<","<<j<<")="<<DC2[i]<<" ";
          else
          std::cout<< "C0("<<i<<","<<j<<")="<<"0"<<" ";	*/
      }
      // std::cout<<""<<std::endl;
   }
   return true;
}

//===========================================================================

template<typename Int, typename Real>
void ReducerBB<Int, Real>::pairwiseRedPrimal(int64_t i, int64_t d, bool taboo[]) {
   const int64_t dim = m_lat->getDim();
   // ++m_countDieter;
   m_lat->updateScalL2Norm(i);
   bool modifFlag;
   std::cout << " Entering pairwiseRedPrimal, i = " << i << ", d = " << d << " **\n";
   std::cout << " vecNorm(i) = " << m_lat->getVecNorm(i) << "\n";

   for (int64_t j = d; j < dim; j++) {
      IntVec &row1 = m_lat->getBasis()[i];
      // NTL::Mat_row<Int> row1(m_lat->getBasis(), i);
      std::cout << " row(i) = " << row1 << "\n";
      if (i == j) continue;
      modifFlag = false;
      IntVec &row2 = m_lat->getBasis()[j];
      // NTL::Mat_row<Int> row2(m_lat->getBasis(), j);
      ProdScal<Int>(row1, row2, dim, m_ns);
      std::cout << " redPrimal, before divideRound, j = " << j << "\n";
      std::cout << " m_ns = " << m_ns << ",  vecNorm(i) = " << m_lat->getVecNorm(i) << "\n";
      DivideRound<Real>(m_ns, m_lat->getVecNorm(i), m_ns);
      std::cout << " redPrimal, after divideRound, j = " << j << "\n";
      if (m_ns == 0) continue;
      std::cout << " redPrimal, before conv, m_ns = " << m_ns << "\n";
      NTL::conv(m_bs, m_ns);
      std::cout << " redPrimal, before if (m_ns ...), m_ns = " << m_ns << "\n";
      if (m_ns < 1000 && m_ns > -1000) {
         m_lat->updateScalL2Norm(j);
         IntVec &row1 = m_lat->getBasis()[i];
         IntVec &row2 = m_lat->getBasis()[j];
         //NTL::Mat_row<Int> row2(m_lat->getBasis(), j);
         //NTL::Mat_row<Int> row1(m_lat->getBasis(), i);
         ModifVect(row2, row1, -m_bs, dim);

         // Verify that m_lat->getBasis()[j] is really shorter
         IntVec &row3 = m_lat->getBasis()[j];
         // NTL::Mat_row<Int> row1(m_lat->getBasis(), j);
         ProdScal<Int>(row3, row3, dim, m_ns);
         if (m_ns >= m_lat->getVecNorm(j)) {
            IntVec &row3 = m_lat->getBasis()[j];
            IntVec &row4 = m_lat->getBasis()[i];
            //NTL::Mat_row<Int> row2(m_lat->getBasis(), j);
            //NTL::Mat_row<Int> row1(m_lat->getBasis(), i);
            ModifVect(row3, row4, m_bs, dim);
         } else {
            modifFlag = true;
            m_lat->setVecNorm(m_ns, j);
         }
         // std::cout << " redDieter, end of the if, j = " << j << "\n";
      } else {
         // std::cout << " redDieter, in the else, j = " << j << "\n";
         IntVec &row1 = m_lat->getBasis()[j];
         IntVec &row2 = m_lat->getBasis()[i];
         //NTL::Mat_row<Int> row2(m_lat->getBasis(), j);
         //NTL::Mat_row<Int> row1(m_lat->getBasis(), i);
         ModifVect(row1, row2, -m_bs, dim);
         m_lat->setNegativeNorm(j);
         modifFlag = true;
      }
      if (modifFlag) {
         std::cout << " PairwiseRedPrimal, in modifFlag \n";
         ++m_cpt;
         if (taboo) {
            taboo[i] = false;
            taboo[j] = false;
         }
      }
   }
   // std::cout << "End of pairwiseRedPrimal, i = " << i << ", d = " << d << " *****\n";
}

//=========================================================================

/**
 * Reduce the Cholesky matrix by adding a multiple of the i-th vector
 * to the j-th vector. It updates the Gram-Schmidt matrix.
 */
template<typename Int, typename Real>
void ReducerBB<Int, Real>::reductionFaible(int64_t i, int64_t j) {
   /*
    * Reduit la matrice de Cholesky (d'ordre 2) en ajoutant un multiple du
    * vecteur i au vecteur j, si possible. Remet a jour la matrice des produits scalaires.
    * Utilise seulement par redLLLOld.
    */
   Real cte;
   std::int64_t cteLI;
   cte = m_cho2[i][j] / m_cho2[i][i];
   const int64_t dim = m_lat->getDim();

   if (abs(cte) < std::numeric_limits<double>::max()) {
      // On peut representer cte en int64_t
      if (abs(cte) > 0.5) {
         NTL::conv(cteLI, Round(cte));
         IntVec &row1 = m_lat->getBasis()[j];
         IntVec &row2 = m_lat->getBasis()[i];
         //NTL::Mat_row<Int> row1(m_lat->getBasis(), j);
         //NTL::Mat_row<Int> row2(m_lat->getBasis(), i);
         ModifVect(row1, row2, -cteLI, dim);
      } else return;

   } else {
      // On represente cte en double.
      if (abs(cte) < std::numeric_limits<long double>::max()) cte = Round(cte);
      IntVec &row1 = m_lat->getBasis()[j];
      IntVec &row2 = m_lat->getBasis()[i];
      //NTL::Mat_row<Int> row1(m_lat->getBasis(), j);
      //NTL::Mat_row<Int> row2(m_lat->getBasis(), i);
      ModifVect(row1, row2, -cte, dim);
   }
   m_lat->setNegativeNorm(j);
   m_lat->updateVecNorm(j);
   miseAJourGramVD(j);
   calculCholesky2LLL(i, j);
}

//=========================================================================

// Translation of our old LLL implementation from Modula-2 to C++. Rather slow.
template<typename Int, typename Real>
void ReducerBB<Int, Real>::redLLLOld(double delta, std::int64_t maxcpt, int64_t Max) {
   // This is a C translation of the old implementation by R. Couture.
   // Effectue la pre-reduction de B au sens de Lenstra-Lenstra-Lovasz. N'utilise
   // pas les vecteurs m_lat->getBasis().vecNorm et  Wm_lat->getDualBasis().

   // bool withDual = false;   // m_lat->withDual();
   const int64_t REDBAS_e = 40;
   int64_t i, j, k, h;
   Real Cho0ij;
   Real limite;
   std::int64_t cpt;

   const int64_t dim = m_lat->getDim();
   if (Max == 0) Max = dim;
   cpt = 0;
   calculGramVD();
   limite = 1.0;
   for (k = 1; k <= REDBAS_e; k++)
      limite *= 2.0;
   limite *= dim;
   m_cho2[0][0] = m_gramVD[0][0];
   m_cho2[0][1] = m_gramVD[0][1];
   m_IC[0] = 1;
   m_cho2[1][1] = m_gramVD[1][1] - m_cho2[0][1] * (m_cho2[0][1] / m_cho2[0][0]);
   m_IC[1] = 1;
   for (i = 2; i < dim; i++)
      m_IC[i] = -1;
   h = 0;

   while (h < Max - 1 && cpt < maxcpt) {
      if (m_gramVD[h + 1][h + 1] > limite) {
         for (i = h; i >= 0; i--)
            reductionFaible(i, h + 1);
      } else reductionFaible(h, h + 1);

      calculCholesky2Ele(h + 1, h + 1);
      if (m_IC[h + 1] == -1) m_IC[h + 1] = h + 1;
      if (m_cho2[h + 1][h + 1] / m_cho2[h][h]
            + (m_cho2[h][h + 1]) / m_cho2[h][h] * (m_cho2[h][h + 1] / m_cho2[h][h]) < delta) {
         ++cpt;
         m_lat->permute(h, h + 1);
         permuteGramVD(h, h + 1, dim);
         m_cho2[h][h] = m_gramVD[h][h];
         for (i = 0; i < h; i++) {
            std::swap(m_cho2[i][h], m_cho2[i][h + 1]);
            m_cho2[h][h] -= m_cho2[i][h] * (m_cho2[i][h] / m_cho2[i][i]);
         }
         if (h == 0) {
            Cho0ij = m_cho2[0][1] / m_cho2[0][0];
            if (abs(Cho0ij) > 0.5) {
               m_IC[0] = 1;
               m_IC[1] = -1;
               h = 0;
            } else {
               m_cho2[1][1] = m_gramVD[1][1] - m_cho2[0][1] * m_cho2[0][1] / m_cho2[0][0];
               calculCholesky2LLL(2, 2);
               m_IC[0] = 2;
               m_IC[1] = 2;
               m_IC[2] = 2;
               h = 1;
            }
         } else {
            m_IC[h] = h + 1;
            m_IC[h + 1] = -1;
            --h;
         }
      } else {
         for (i = 0; i <= h + 2; i++) {
            if (h + 2 > m_IC[i]) {
               if (h + 2 < dim) calculCholesky2Ele(i, h + 2);
               m_IC[i] = h + 2;
            }
         }
         ++h;
      }
   }
   if (cpt == maxcpt) {
      std::cout << "***** in redLLLOld cpt > maxcpt = " << maxcpt << std::endl;
   }
   for (j = 2; j < Max; j++) {
      for (i = j - 2; i >= 0; i--)
         reductionFaible(i, j);
   }
   m_lat->setNegativeNorm();
}

}     // namespace LatticeTester

#endif 
