#ifndef NTL_LLL_RR_lt__H
#define NTL_LLL_RR_lt__H

#include <NTL/vector.h>
#include <NTL/matrix.h>
#include <NTL/mat_ZZ.h>
#include <NTL/mat_RR.h>
#include <NTL/vec_RR.h>
#include <NTL/vec_double.h>
// #include <latticetester/FlexTypes.h>

NTL_OPEN_NNS

// classical Gramm-Schmidt versions. modified for Lattice Tester


/**
 * This function is similar to `LLL_FP` in NTL, but only the first `r` rows and
 * first `c` columns of the matrix `B` are considered, and a basis is built
 * for the lattice generated by these (partial) rows.  The other elements of
 * `B` are ignored. The basis is returned in the upper left corner of `B`,
 * with the shortest basis vector always in the first row.
 * If `r=0`, then all the rows of the `IntMat` object are taken.
 * If `c=0`, then all the columns are taken.
 * The square lengths of the returned basis vectors are also returned in the
 * `double` vector `sqlen`,  in `sqlen[0],..., sqlen[d-1]`, if this vector given.
 * The indices of `B` and `sqlen` start at 0.
 * The function returns the dimension of the computed basis (the number of independent rows).
 */
/*
template<typename IntMat>
static long LLL_FPInt(IntMat &B, double delta = 0.99,
      long r = 0, long c = 0, Vec<double> *sqlen = 0);
*/

/**
 * This function is similar to `BKZ_FP` in NTL, with the same modifications
 * as in LLL_FPInt above.
 */
/*
template<typename IntMat>
static long BKZ_FPInt(IntMat &BB, double delta = 0.99,
      long blocksize = 10, long prune = 0, long r = 0, long c = 0, Vec<double> *sqlen = 0);
*/

/**
 * This function is similar to `LLL_FP` in NTL, but only the first `r` rows and
 * first `c` columns of the matrix `B` are considered, and a basis is built
 * for the lattice generated by these (partial) rows.  The other elements of
 * `B` are ignored. The basis is returned in the upper left corner of `B`,
 * with the shortest basis vector always in the first row.
 * If `r=0`, then all the rows of the `IntMat` object are taken.
 * If `c=0`, then all the columns are taken.
 * The square lengths of the returned basis vectors are also returned in the
 * `double` vector `sqlen`,  in `sqlen[0],..., sqlen[d-1]`, if this vector given.
 * The indices of `B` and `sqlen` start at 0.
 * The function returns the dimension of the computed basis (the number of independent rows).
 */

// static long LLL_RR_lt(mat_ZZ& B, const RR& delta, long r = 0, long c = 0, vec_RR* sqlen = 0);

long LLL_RR_lt(mat_ZZ& B, double delta = 0.99, long r = 0, long c = 0, vec_RR* sqlen = 0);

/**
 * These two functions are wrappers of `BKZ_RR` in NTL, with the same modifications
 * as in `LLL_RR_lt` above.
 */
long BKZ_RR_lt(mat_ZZ& B, double delta = 0.99,
      long blocksize = 10, long prune = 0, long r = 0, long c = 0, vec_RR* sqlen = 0);


NTL_CLOSE_NNS

#endif
