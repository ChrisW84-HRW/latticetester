/**
 * \page FindMK2 FindMK2
 *
 * This module contains the main program to search for a fixed number of
 * prime integers \f$m\f$ close to a power of 2 (such that \f$m < 2^e\f$),
 * and for which \f$r = (m^k-1)/(m-1)\f$ is also prime. We may also require
 * that \f$(m-1)/2\f$ be prime by setting the boolean variable *Safe* to
 * `true`. (See class LatMRG::Primes for the basic method
 * called by the program.)
 *
 * The program is called `findmk2`. \anchor REF__FindMK2_ref_findmk2 The
 * program reads the search parameters from a file. This data file must have
 * the extension `.dat`. To run the program, the name of the data file must
 * be given without extension on the command line, and the results will be
 * written in a file of the same name but with extension `.res`. For example,
 * if the data file is called `find2.dat`, then the program is run by calling
 *
 *  `findmk2 find2`
 *
 * and the results will be written in file `find2.res`.
 *
 * The data file must have the format displayed in Figure&nbsp; {@link
 * REF__FindMK2_findmk2_dat findmk2.dat}.
 *
 * <center>
 *  <div class="LatSoft-fbox"><div class="LatSoft-parbox">
 * <table class="LatSoft-table">
 * <tr>
 *   <td colspan="3" class="l"># This is a comment line</td>
 * </tr><tr>
 *   <td class="l">\f$k\f$</td>
 *   <td class="l"></td>
 *   <td class="l">order</td>
 * </tr><tr>
 *   <td class="l">\f$e\f$</td>
 *   <td class="l"></td>
 *   <td class="l"></td>
 * </tr><tr>
 *   <td class="l">\f$s\f$</td>
 *   <td class="l"></td>
 *   <td class="l"></td>
 * </tr><tr>
 *   <td class="l"><em>Safe</em></td>
 *   <td class="l"></td>
 *   <td class="l">a boolean</td>
 * </tr>
 * </table>
 * </div></div> <center>\anchor REF__FindMK2_findmk2_dat Data file format for
 * `findmk2`.</center>
 * </center>
 *
 * The file must contain the following parameters in that order:
 *
 * <dl><dt>\f$k\f$:</dt>
 * <dd>
 * the order of the MRG.
 * </dd>
 * <dt>\f$e\f$:</dt>
 * <dd>
 * the modulus of congruence will be close to \f$2^e\f$.
 * </dd>
 * <dt>\f$s\f$:</dt>
 * <dd>
 * the program will find the first \f$s\f$ values of \f$m\f$ closest to
 * \f$2^e\f$ and such that \f$m < 2^e\f$.
 * </dd>
 * <dt><em>Safe</em>:</dt>
 * <dd>
 * if `true`, only \f$m\f$ such that \f$(m-1)/2\f$ is prime are considered.
 * </dd>
 * </dl>
 */
