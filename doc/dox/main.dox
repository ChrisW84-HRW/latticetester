/**
 * 
 * \if NESTED_PROJECT
 * \page latticetester LatticeTester Manual
 * \else
 * \mainpage LatticeTester Manual
 * \endif
 * 
 * # Reference Manual
 * 
 * If, at any point in this documentation, some of the vocabulary or concepts
 * are unknown to you, we would like to refer you to our reference manual which
 * as well as describing the main purposes of *LatticeTester* presents the
 * theory behind this software.
 * \todo Include the manual in the repo and give a link to it.
 *
 * # Overview
 * 
 * *LatticeTester* is a C++ software library to compute theoretical measure of 
 * uniformity (or figures of merit) for lattices \f$L_t\f$ in the
 * \f$t\f$-dimensional real space that have integer or rational coordinates.
 * Lattices are encountered, as an example, in the analysis of quasi-Monte Carlo
 * point sets and certain kinds of pseudo-random number generators.
 * 
 * \todo **Marc-Antoine** The presence of figures of merit computations in
 * LatticeTester is logical but currently very primitive. Shouldn't we put the
 * tests and various ways to compute figures of merit (including weighted
 * figures of merit for projections) in classes? This could be done whilst
 * cleaning the switch `statements` so it seems like a logical step.
 *
 * Measures of uniformity include: 
 * - the length of the shortest non-zero vector in the lattice or in its dual
 * lattice (the spectral test),
 * - the Beyer ratio,
 * - the \f$\mathcal{P}_\alpha\f$ test,
 * **Marc-Antoine**: This is not implemented and probably never will. Remove it?
 * - as well as figures of merit that take normalized versions of these measures
 * over projections of the lattice on subsets of the \f$t\f$ coordinates, and
 * then take a weighted sum or the worst-case over the class of considered
 * projections.
 *
 * *LatticeTester* also features a high-level executable that can be useful in
 * the case where the user can already describe a lattice that interests him
 * with a basis. This executable can then be used in a very straight-forward way
 * to perform computations directly.
 * 
 * *LatticeTester* is not intended as a tool to search for lattices that conform
 * to certain prerequisites, but instead it can be extended with a few classes
 * to do so. The *LatNet Builder* and *LatMRG* software tools, designed in our
 * laboratory to analyze lattice rules and linear pseudo-random number
 * generators, are prominent examples of that.
 * 
 * # Contents and implementation
 * 
 * *LatticeTester* mainly aims at solving the following problems:
 * 1. **Lattice Basis Construction**: Given a set of vectors with integer
 * coordinates (not necessarily independent), find a basis for the lattice
 * generated by these vectors.
 * 2. **Find Dual Lattice Basis**: Given a lattice basis, compute the
 * corresponding dual lattice basis whether the rescalling is known or not.
 * 3. **Lattice Basis Reduction**: Given a lattice basis, find another basis
 * whose vectors are nearly orthogonal or as short as possible in some sense.
 * There are many variants and definitions of this.
 * 4. **Shortest Vector Problem**: Find a shortest nonzero vector in the
 * lattice, and proove this is the shortest.
 * 5. **Approximate Shortest Vector Problem**: Find a short vector that is not
 * much larger than a shortest nonzero vector in the lattice.
 *
 * The prefered approach to solving these problems is presented in the reference
 * manual. For each of the problems, *LatticeTester* implements at least one way
 * to solve it. For 1, a simple approach based on Gaussian elimination is
 * available. There is also a method that performs 3. via LLL reduction at the
 * same time. Although 2 is, most of the time, application specific, there is
 * a general function allowing to compute the dual basis of a integer lattice
 * as well as the rescalling needed for the dual to be integer. 1 and 2 being
 * somewhat simple problems, they are covered entirely in the reference manual.
 * *LatticeTester* implements 4 solutions to 3:
 * - **Dieter pre-reduction** given by Dieter in \cite rDIE75a.
 * - **LLL reduction** given Lenstra, Lenstra and Lovasz in \cite mLEN82a.
 * - **Block Korkin-Zolotarev (BKZ)** reduction given by Schnorr \cite mSCH91a.
 * - **Reduction in the sense of Minkowski** given by Minkowski in \cite mMIN11a.
 *
 * Next, 4 can be solved via a Branch and Bound algorithm that is available for
 * both the euclidian and the L1 norms. This algorithm is the one proposed in
 * \cite rDIE75a and later improved in \cite rKNU98a and \cite mFIN85a. Finally,
 * 5 is not yet implemented or is not implemented in any intersting way.
 *
 * \todo
 * Have a word on figures of merit if needed.
 *
 * \remark **Marc-Antoine**: the rest of this section should be removed in my opinion.
 *
 * *LatticeTester* provides several tests applied on the lattice structure.
 * In particular it implements the Spectral Test given originally by Coveyou and
 * MacPherson \cite rCOV67a and improved by Knuth \cite rKNU98a. This test
 * requires an algorithm solving the shortest vector problem (SVP).
 * *LatticeTester* implements a solution based on a branch and bound procedure
 * given originally by Dieter \cite rDIE75a, improved by Knuth \cite rKNU98a and
 * then by Fincke and Pohst \cite mFIN85a. The lastest version uses a Cholesky
 * decomposition and is precisely implemented in *LatticeTester*. This version
 * can solve SVP for the L2 norm as well as for the L1 norm.
 * 
 * The computing time of the branch and bound procedure depends mostly on the
 * dimension (non-polynomial dependency). But it also significantly depends on
 * the length of the vectors in the input basis. It turns out that the shortest
 * the input vectors are (i.e the more the input basis is already reduced), the
 * fastest the branch and bound will be performed. Hence, one must perform a
 * basis reduction in advance to prevent an explosion of the computing time.
 * 
 * The shortest vector given by the branch and bound shall then be compared to
 * an upper bound. *LatticeTester* propose several normalization given in
 * \cite mCON99a :
 * 
 * - **BestLat**: The best theoretical bounds on the length of the shortest
 * vector in a lattice, based on the densest sphere packing in lattices. For
 * dimension up to 8, bounds are exacts, beyond values are approximate
 * - **Rogers**: The Rogers normalization refers to Rogers bounds.
 * - **Laminated**: The Laminated normalization is based on the densest sphere
 * packing in *laminated* lattices.
 * - **Minkowski**: The boundings lengths of Minkowski normalization are related
 * to the Minkowski lattice constants.
 * - **MinkowskiL1**: This is the same as the Minkowski noramization but this is
 * applied for the L1 norm.
 * 
 * Moreover, *LatticeTester* implements a variant of the branch and bound
 * process in order to perform a Minkowski reduction \cite mMIN11a \cite rAFF85a.
 * This reduction is needed for computing Beyer-quotient which quantify the
 * uniformity in a lattice.
 * 
 * The vast majority - and more specifically LLL and BKZ reduction - of the implementation
 * is based on the NTL library developped by Victor Shoup \cite iSHO05a. It is based itself
 * on the GNU Multiple Precision Arithmetic Library (GMP) \cite iGMP06a, which allow arbitrary
 * precision for calculations.
 * 
 * # Manual Outline
 * 
 * The rest of the manual goes as follows
 * - \subpage detailed_usage presents the installation process, the dependencies
 * and the way to use the executable.
 * - \subpage DIY presents the main classes of the library and the most
 * "overloadable" methods.
 * - \subpage a_intro should be removed in favor of the reference manual. 
 * 
 * */
