/**
 * 
 * \if NESTED_PROJECT
 * \page latticetester LatticeTester Manual
 * \else
 * \mainpage LatticeTester Manual
 * \endif
 * 
 * # Reference Manual
 * 
 * If, at any point in this documentation, some of the vocabulary or concepts
 * are unknown to you, we refer you to our reference manual which,
 * as well as describing the main purposes of *LatticeTester*, presents the
 * theory behind this software.
 *
 * # Manual Outline
 * 
 * The rest of the manual goes as follows
 * - \subpage detailed_usage presents the installation process, the
 * dependencies, the usage of the executable and the main classes to look for
 * when using the library.
 * - \subpage a_intro should be removed in favor of the reference manual. 
 * - \subpage examples_page is a good place to start at
 * - The Classes and the Namespaces buttons above link to the mains page to look
 *   into the API documentation
 *
 * # Overview
 * 
 * *LatticeTester* is a C++ software library to perform various calculations on
 * lattices \f$L_t\f$ in the \f$t\f$-dimensional rational space. Lattices are
 * encountered, as an example, in the analysis of quasi-Monte Carlo point sets
 * and certain kinds of pseudo-random number generators. *LatticeTester* gives
 * ways to compute theoretical measure of uniformity (or figures of merit) as
 * well as methods to solve the following problems:
 * 1. **Lattice Basis Construction**: Given a set of vectors with integer
 * coordinates (not necessarily independent), find a basis for the lattice
 * generated by these vectors.
 * 2. **Find Dual Lattice Basis**: Given a lattice basis, compute the
 * corresponding dual lattice basis whether the rescalling is known or not.
 * 3. **Lattice Basis Reduction**: Given a lattice basis, find another basis
 * whose vectors are nearly orthogonal or as short as possible in some sense.
 * There are many variants and definitions of this.
 * 4. **Shortest Vector Problem**: Find a shortest nonzero vector in the
 * lattice, and proove this is the shortest.
 * 5. **Approximate Shortest Vector Problem**: Find a short vector that is not
 * much larger than a shortest nonzero vector in the lattice.
 *
 * The measures of uniformity that are considered by this software are: 
 * - the length of the shortest non-zero vector in the lattice or in its dual
 * lattice (the spectral test),
 * - the Beyer ratio,
 * - as well as figures of merit that take normalized versions of these measures
 * over projections of the lattice on subsets of the \f$t\f$ coordinates, and
 * then take a weighted sum or the worst-case over the class of considered
 * projections.
 *
 * *LatticeTester* also features a high-level executable that can be useful in
 * the case where the user can already describe a lattice that interests him
 * with a basis. This executable can then be used in a very straight-forward way
 * to perform computations directly.
 * *LatticeTester* is not intended as a tool to search for lattices that conform
 * to certain prerequisites, but instead it can be extended with a few classes
 * to do so. The *LatNet Builder* and *LatMRG* software tools, designed in our
 * laboratory to analyze lattice rules and linear pseudo-random number
 * generators, are prominent examples of that.
 * 
 * # Contents and implementation
 * 
 * The prefered approach to solving the problems above is presented in the
 * reference
 * manual. For each of the problems, *LatticeTester* implements at least one way
 * to solve it. For 1, a simple approach based on Gaussian elimination is
 * available. There is also a method that performs 3. via LLL reduction at the
 * same time. Although 2 is, most of the time, application specific, there is
 * a general function allowing to compute the dual basis of a integer lattice
 * as well as the rescalling needed for the dual to be integer. 1 and 2 being
 * somewhat simple problems, they are covered entirely in the reference manual.
 * *LatticeTester* implements 4 solutions to 3:
 * - **Dieter pre-reduction** given by Dieter in \cite rDIE75a.
 * - **LLL reduction** given Lenstra, Lenstra and Lovasz in \cite mLEN82a.
 * - **Block Korkin-Zolotarev (BKZ)** reduction given by Schnorr \cite mSCH91a.
 * - **Reduction in the sense of Minkowski** given by Minkowski in \cite mMIN11a.
 *
 * Next, 4 can be solved via a Branch and Bound algorithm that is available for
 * both the euclidian and the L1 norms. This algorithm is the one proposed in
 * \cite rDIE75a and later improved in \cite rKNU98a and \cite mFIN85a. Finally,
 * 5 is not yet implemented or is not implemented in any interesting way.
 *
 * The figures of merit strongly depend on the other problems. The
 * implementation of the Spectral Test, given originally by Coveyou and
 * MacPherson \cite rCOV67a, and improved by Knuth \cite rKNU98a requires an
 * algorithm solving the shortest vector problem (4). It is also traditionally
 * done on the dual of the lattice instead of the primal. The Beyer ratio is
 * dependant on the Branch and Bound procedure: it implements a variant of the
 * Branch and Bound process in order to perform a Minkowski reduction
 * \cite mMIN11a \cite rAFF85a.
 *
 * The computing time of the Branch and Bound procedure depends exponentially on
 * the dimension for which we want to solve it. But it also significantly
 * depends on the length of the vectors in the input basis. It turns out that
 * the shortest the input vectors are (i.e the more the input basis is already
 * reduced), the fastest the branch and bound will be performed. Hence, it is
 * also recommended to perform a basis reduction before the figures of merit
 * computation to prevent an explosion of the computing time.
 * 
 * When doing the spectral test, the shortest vector given by the Branch and
 * Bound shall be compared to an upper bound on its length. *LatticeTester*
 * proposes several normalization based on the sphere packing problem given in
 * \cite mCON99a.
 * 
 * The vast majority - and more specifically LLL and BKZ reduction - of the
 * implementation is based on the NTL library developped by Victor Shoup
 * \cite iSHO05a. It is based itself on the GNU Multiple Precision Arithmetic
 * Library (GMP) \cite iGMP06a, which allow arbitrary precision for
 * calculations.
 * 
 * 
 * */
