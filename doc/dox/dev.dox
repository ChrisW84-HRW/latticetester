/**
 * \page dev Making your own programs
 *
 *   LatMRG offers more flexibility than just providing a set of
 * executable programs. One can also use the modules provided to write one
 * own’s programs. For that, a C++ compiler and some knowledge about the C++
 * language are required. Instead of providing the parameters according to
 * the format described in \ref usage,
 *    one sets those parameters (or data) by setting the appropriate
 * variables or creating the appropriate objects. In this section, we
 * introduce briefly the classes and low-level modules, which are described
 * in Appendix B and C,
 *    respectively. It is important to recall that the multiplier’s and basis
 * components can be implemented with different representations and that one
 * must make sure to select the appropriate representation for the target
 * application. See Section 3.2
 *    for more details on this.
 *
 * \todo Replace section numbers with appropriate links.
 *
 *
 *   # Using the classes of LatMRG
 *
 *   The modules of LatMRG (excluding the executable programs) have
 * been classified in two sets: lower-level and intermediate-level. The
 * lower-level modules offer basic facilities for arithmetic operations and
 * conversions, with different representations, for basis vectors and
 * multipliers. They are described in the NTL documentation (see the URL
 * [http://shoup.net/ntl/doc/tour.html](http://shoup.net/ntl/doc/tour.html)).
 *
 *   The intermediate-level classes inheriting from the virtual class
 * <tt>IntLattice</tt> constructs lattice bases for different kinds of
 * generators or point sets. The currently implementing classes are
 * <tt>Rank1Lattice</tt>, <tt>KorobovLattice</tt> and <tt>MRGLattice</tt>.
 * <tt>IntLattice</tt> itself offers tools for manipulating lattice bases,
 * and generally does common operations on bases. The class <tt>Reducer</tt>
 * performs tests on these lattices, such as finding the shortest vector in a
 * lattice, and reducing a basis in the sense of Minkowski. Those classes are
 * described in the following chapters. The programs described in
 * \ref usage use those intermediate and
 * lower-level classes in their implementation, and so, provide examples of
 * how to use them.
 *
 *   # Lower-level modules and Changing the representation
 *
 *   As discussed in section  \link REF__sec1_sec_large Large numbers, matrices
 * and polynomials\endlink, the
 * multiplier’s components can be implemented in the <tt>long</tt> or
 * <tt>ZZ</tt> representation, while the basis components can be in the
 * <tt>double</tt> or <tt>RR</tt> representation. To select the appropriate
 * representation (see modules <tt>Types</tt> where all the basic possible
 * types are selected), one should compile and link his programs with one of
 * the libraries <tt>liblatLLDD.a</tt>, <tt>liblatZZDD.a</tt> or
 * <tt>liblatZZRR.a</tt>. Generally speaking, the proper choice of
 * representation depends on the size of the modulus \f$m\f$. For example, if
 * \f$m\f$ is less than \f$2^{25}\f$, then the library <tt>liblatLLDD.a</tt>
 * should be appropriate. For most cases, the library <tt>liblatZZDD.a</tt>
 * will be satisfactory.
 *
 */
